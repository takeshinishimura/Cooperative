---
project:
  type: website
  output-dir: docs
title: "統計データを用いた作図：e-Stat（API）編"
format:
  html:
    toc: true
    toc-title: 目次
    toc_float: true
    toc-depth: 3
    number-sections: true
    theme: lumen
lang: ja
---

ここでは，農業協同組合数の推移の折れ線グラフを作成します。

[消費生活協同組合](https://takeshinishimura.github.io/Cooperative/02_stats_estat.html){target="_blank"} のときと同じように，農業協同組合に関する統計データもe-Statから取得できます。
農業協同組合数の推移がわかる最新のデータは，次のページから取得できます。
実際に検索してみて，このページにたどり着けるか試してみましょう。

::: {.callout-note collapse="true" icon="true"}
## 農業協同組合等現在数統計 / 確報 令和４年度農業協同組合等現在数統計
1 総括の部 農業協同組合、同連合会及び農事組合法人数の推移（第１表）

[https://www.e-stat.go.jp/stat-search/files?stat_infid=000040060821](https://www.e-stat.go.jp/stat-search/files?stat_infid=000040060821){target="_blank"}
:::

上述のサイトから，`r006-02-001.xls` という名前のExcel形式のファイルをダウンロードできます。
以下の説明は，Excelでは満足できない人のためのものです。
Excelを使って作成するグラフとRを使って作成するグラフの何が違うのか，どちらが好みかを考えながら作業してみてください。


## Excelファイルを使う方法

### Excelファイルの読み込み

ここでも，e-StatにあるExcelファイルのフォーマットが原因で，データを扱えるようにするまでが一苦労です。
本当なら試行錯誤が必要ですが，以下のとおり実行すれば問題なく読み込めます（今回の場合，ヘッダーを読み込むのを諦めました）。

以下のコマンドでExcelファイルを読み込みます。

```{r}
#| eval: false
library(readxl)
df <- readxl::read_excel("r006-02-001.xls", col_names = FALSE, skip = 12)
```
```{r}
#| echo: false
#| message: false
library(readxl)
df <- readxl::read_excel("../data/r006-02-001.xls", col_names = FALSE, skip = 12)
```

次に，読み込んだデータの前処理をします。
ここで何をやるかは，そのファイルがどうなっているかに依存します。
この作業を地道にやることにより，データ分析を見越して綺麗なファイルを作成しなければならないことに気づくことでしょう。

```{r}
# 前処理半作：データ分析は前処理が大事だという諺（嘘）
df_header1 <- c("", rep("単位農協", 4), rep("連合会", 3), rep("農事組合法人", 4))
df_header2 <- c("年次", "総合農協", "専門農協（出資組合）", "専門農協（非出資組合）", "合計", "出資連合会", "非出資連合会", "合計", "１号", "２号", "１号及び２号", "合計")
df_header <- paste0(paste(df_header1, df_header2, sep = "（"), "）")
df_header <- sub("^（年次）", "年次", df_header)

names(df) <- df_header
df <- df[-c((nrow(df) - 4):nrow(df)), ]

# 8.3(変更前)の行を削除
df <- df[-49, ]

# 和暦を西暦に変換する関数
convert_to_ad <- function(nen) {
  # 和暦と西暦の対応表
  era_table <- c("明治" = 1868, "大正" = 1912, "昭和" = 1926, "平成" = 1989, "令和" = 2019)
  
  # 和暦の元号を補う
  for (i in 2:length(nen)) {
    if (!grepl("^[明大昭平令]", nen[i])) {
      nen[i] <- paste0(substr(nen[i - 1], 1, 2), nen[i])
    }
  }
  nen <- gsub("元", "1", nen)
  
  # 和暦から西暦の年を計算する
  ad_years <- numeric(length(nen))
  for (era in names(era_table)) {
    year <- as.numeric(gsub(era, "", nen[grepl(era, nen)]))
    ad_years[grepl(era, nen)] <- era_table[era] + year - 1
  }
  return(ad_years)
}

df$年次 <- gsub("\\..*?$", "", df$年次)
df$年次 <- gsub("^S", "昭和", df$年次)
df$年次 <- gsub("^H", "平成", df$年次)
df$年次 <- gsub("^R", "令和", df$年次)
df$年次 <- convert_to_ad(df$年次)

# 以下は好みであり，実行しなくてもよい
dfcoop <- data.frame(df, check.names = FALSE)
```

Excelファイルから読み込んだデータが分析可能な状態になっているかどうかを確認します。

```{r}
head(dfcoop)
str(dfcoop)
```

このようになっていれば，作図や分析に使えるデータであるといえます。
なお，`NA` というのは `NA` という文字があるのではなく，そこには何もないという意味で理解するとよいでしょう。

### 折れ線グラフ {#sec-simpleplot}

次に，折れ線グラフを作成します。

```{r}
plot(dfcoop[, c("年次", "単位農協（総合農協）")], type = "o", main = "総合農協数の推移", xlab = "年3月末", pch = 16, las = 1)
```

macOSの場合，文字化けする（トーフになる）かもしれません。
その場合，無視して次に進みましょう。

続いて，専門農協のうちの出資組合と非出資組合も同じ図に表示してみましょう。

```{r}
dfcoop2 <- dfcoop
rownames(dfcoop2) <- dfcoop2[, 1]
dfcoop2 <- dfcoop2[, -1]
matplot(dfcoop2[, c("単位農協（総合農協）", "単位農協（専門農協（出資組合））", "単位農協（専門農協（非出資組合））")], type = "o", main = "単位農協数の推移", xlab = "年3月末", ylab = "農業協同組合数", col = 2:4, lwd = 1, lty = 1, pch = 16, las = 1,  axes = FALSE)
axis(1, at = seq(3, 73, 10), labels = seq(1950, 2020, 10))
axis(2, las = 1)
legend("topright", legend = c("総合農協", "専門農協（出資組合）", "専門農協（非出資組合）"), col = 2:4, lwd = 1, lty = 1, pch = 16)
```


## e-StatのAPIを使う方法 {#sec-estat}

e-StatからExcelファイルをダウンロードしなくても，APIを使ってデータを取得できることがあります。
幸いなことに，今回扱った農業協同組合数の推移のデータはAPIを使って取得できます。
APIを使うと，Excelファイルを読み込む場合と異なる利点があります。
それは前処理をほとんどしなくてよいことです。

### e-StatのAPI取得

まず，e-Statのサイトでユーザ登録して，APIを取得します。
取得方法は自分で調べてください。

次に，[keyring: Access the system credential store from R](https://github.com/r-lib/keyring){target="_blank"} を設定します。
これは必須ではありませんが，便利なので設定しておくとよいです。

```{r}
#| eval: false
# 以下を実行する前に，e-StatのAPIを取得しておく
install.packages("keyring")
# library(keyring)
keyring::key_set("e-stat")
# 使う場合は，以下のようにする
# keyring::key_get("e-stat")
```

### e-Statからデータ取得

いよいよ本題に入ります。
e-Statから欲しいデータを取得してみましょう。

次のコードを実行することで，欲しいデータが取得できます。
`statsDataId = "0002066879"` にある数字は，e-Statの[農業協同組合等現在数統計 確報 令和４年度農業協同組合等現在数統計総括の部 1 農業協同組合、同連合会及び農事組合法人数の推移（第１表）](https://www.e-stat.go.jp/dbview?sid=0002066879){target="_blank"}のページを指すIDです。

```{r}
library(httr)

response <- httr::GET(
  url = "https://api.e-stat.go.jp/rest/2.1/app/getSimpleStatsData",
  query = list(
    appId = keyring::key_get("e-stat"),
    statsDataId = "0002066879",
    sectionHeaderFlg = 2
  )
)
response <- httr::content(response)
df <- read.csv(text = sub("^.*\\\"VALUE\\\"\n", "", response), header = TRUE, check.names = FALSE)

df2 <- df
names(df2) <- gsub("\\(.+\\)", "", names(df2))

# 年次の整理
df2 <- df2[df2$時点 != "1996年3月末(変更前)", ]
df2 <- df2[df2$時点 != "2023年4月1日", ]
df2$年次 <- as.integer(gsub("年3月末.*$", "", df2$時点))

# 区分の整理
df2$区分 <- gsub("_", "（", df2$区分)
df2$区分 <- unlist(lapply(df2$区分, function(x) {
  num_opening_brackets <- sum(utf8ToInt(x) == utf8ToInt("（"))
  return(paste0(x, paste0(rep("）", num_opening_brackets), collapse = "")))
}))

head(df2)
```

欲しかったデータが分析可能な形になったことが確認できます。
このデータフレームはロングです。
ロングからワイドに変換すると人間にとって分かりやすくなりますが，`ggplot2` で作図する場合は，ロングの方が扱いやすいです。

### ggplot2を用いた折れ線グラフ

上記のデータフレームから折れ線グラフを作成する方法は，@sec-simpleplot と同じです。
以下では，授業で使用した図の作成方法を紹介します。

```{r}
#| warning: false
library(ggplot2)
library(ggsci)

df3 <- df2[grepl("^単位農協", df2$区分), ]

g <- ggplot(data = df3, aes(x = 年次, y = value, group = 区分, colour = 区分)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(labels = scales::comma_format()) +
  ggtitle("単位農協数の推移") +
  labs(caption = "出所：農林水産省『令和4年度農業協同組合等現在数統計』\n（https://www.e-stat.go.jp/stat-search/files?stat_infid=000032206155）") +
  theme_bw() +
  scale_color_d3()
g + theme(text = element_text(family = "HiraKakuProN-W3"))
```

最後のところでエラーが出る場合は，`g` だけにして，プラス以降を入力しないでください。
文字化けしても気にせず次に進んでください（文字化けを修正するのは大変なので）。

いい感じの図が描けたら，ファイルに保存する。

```{r}
#| eval: false
outdir <- "./fig"
if (!file.exists(outdir)) {
  dir.create(outdir)
}
ggsave(filename = file.path(outdir, "number_of_ja.pdf"), plot = g, width = 8, height = 4)
```
```{r}
#| include: false
outdir <- "../fig"
if (!file.exists(outdir)) {
  dir.create(outdir)
}
ggsave(filename = file.path(outdir, "number_of_ja.pdf"), plot = g, width = 8, height = 4)
```


## e-Statの検索

@sec-estat では，`statsDataId = "0002066879"` とIDを指定しました。
しかし，通常はデータを探すところから始める必要があります。

以下に探し方の一例を示します。

```{r}
#| eval: false
library(httr)
library(listviewer)
library(rlist)

searchword <- "農業協同組合"

response <- httr::GET(
  url = "https://api.e-stat.go.jp/rest/2.1/app/json/getStatsList",
  query = list(
    appId = keyring::key_get("e-stat"),
    searchWord = searchword
  )
) |>
  httr::content()
listviewer::jsonedit(response)

df <- response$GET_STATS_LIST$DATALIST_INF$TABLE_INF |>
  rlist::list.select(
    id = `@id`,
    STAT_NAME = STAT_NAME$`$`,
    GOV_ORG = GOV_ORG$`$`,
    STATISTICS_NAME = STATISTICS_NAME,
    SURVEY_DATE = SURVEY_DATE,
    TABLE_NAME = TITLE_SPEC$TABLE_NAME
) |>
  rlist::list.stack()

head(df)
nrow(df)

library(DT)
DT::datatable(
  df, caption = searchword, rownames = TRUE,
  extensions = 'Buttons',
  options = list(
    pageLength = 10,
    dom = 'Blfrtip',
    buttons = list(
      c('csv', 'excel')
    )
  )
)
```

ここで示した方法は，[Rからe-Stat APIを使う - Qiita](https://qiita.com/nozma/items/f88f5cc60ab63461deae){target="_blank"} が大変参考になりました。
これ以外にも，e-Statからデータを取得する方法はあります。
例えば，[estatapi](https://yutannihilation.github.io/estatapi/){target="_blank"} というパッケージを使ってもほぼ同じことが簡単にできるようになります。
興味ある人は，自分で確かめてください。
